{"version":3,"sources":["map/Marker.js","map/Map.js","sidebar/Item.js","sidebar/Sidebar.js","header/Header.js","App.js","serviceWorker.js","Store.js","index.js"],"names":["MarkerWrapper","styled","GiPoliceOfficerHead","Marker","inject","observer","onMouseEnter","props","store","id","hover","onMouseLeave","onClick","selected","this","marker","big","baseSize","status","size","color","Component","MapWrapper","div","SimpleMap","onGoogleApiLoaded","map","maps","zones","zone","Polygon","paths","location","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","markers","bootstrapURLKeys","key","config","defaultCenter","center","defaultZoom","zoom","yesIWantToUseGoogleMapApiInternals","defaultProps","lat","lng","ItemWrapper","Icon","Content","Item","name","user","Side","Sidebar","click","HeaderWrapper","height","Logo","img","Right","Count","Header","red","orange","green","src","process","toggle","Wrapper","App","Map","Boolean","window","hostname","match","cleant","m","Math","floor","random","phone","colors","cleantZones","i","Store","show","set","get","console","log","filters","Object","keys","toJS","filter","k","includes","length","observable","action","computed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c54b97d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {GiPoliceOfficerHead} from 'react-icons/gi';\nimport { observer, inject } from 'mobx-react';\n\n\nconst MarkerWrapper = styled(GiPoliceOfficerHead)`\n    display: inline-block;\n    size: 26;\n    color: red;\n    cursor: pointer;\n`;\n\n@inject('store') @observer\nclass Marker extends Component {\n\n  onMouseEnter = () =>{\n    const {store, id} = this.props;\n    store.hover = id;\n  }\n\n  onMouseLeave = () =>{\n    const {store} = this.props;\n    store.hover = null;\n  }\n\n  onClick = () =>{\n    const {store, id} = this.props;\n    store.selected = id;\n  }\n\n  render() {\n    const {marker, store} = this.props;\n\n    const big = store.hover == marker.id || store.selected == marker.id;\n    const baseSize = marker.status == \"red\" ? 20 : 10;\n\n    return (\n      <MarkerWrapper size={big ? 60 : baseSize} color={marker.status} onMouseEnter={this.onMouseEnter}\n      onMouseLeave={this.onMouseLeave} onClick={this.onClick} />\n    );\n  }\n}\n\nexport default Marker;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport * as config from \"../config.json\";\nimport Marker from \"./Marker\";\nimport styled from \"styled-components\";\n\nconst MapWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst ottawa = {\n  lat: 45.4215,\n  lng: -75.6972\n};\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    center: ottawa,\n    zoom: 11\n  };\n\n  onGoogleApiLoaded = (map, maps, zones) => {  \n    zones.map(zone => {\n      var polygon = new maps.Polygon({\n        paths: zone.location,\n        strokeColor: zone.color,\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: zone.color,\n        fillOpacity: 0.35\n      });\n      polygon.setMap(map);\n    })\n  };\n\n  render() {\n    const { markers, zones } = this.props;\n\n    return (\n      // Important! Always set the container height explicitly\n      <MapWrapper>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: config.mapsKey }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map, maps }) => this.onGoogleApiLoaded(map, maps, zones)}\n        >\n          {markers.map(marker => (\n            <Marker key={marker.id} marker={marker} {...marker} />\n          ))}\n        </GoogleMapReact>\n      </MapWrapper>\n    );\n  }\n}\n\nexport default SimpleMap;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {GiPoliceOfficerHead} from 'react-icons/gi';\nimport { observer, inject } from 'mobx-react';\n\nconst ItemWrapper = styled.div`\n    padding: 5px;\n    display: flex;\n    border-bottom: 1px solid #eee;\n    cursor: pointer;\n    background: ${props => props.selected ? \"#eee\" : \"#fff\"}\n`;\n\nconst Icon = styled(GiPoliceOfficerHead)`\n`;\n\nconst Content = styled.div`\n    padding-left: 10px;\n`;\n\n@inject('store') @observer\nclass Item extends Component {\n\n    onMouseEnter = () =>{\n        const {store, id} = this.props;\n        store.hover = id;\n    }\n    \n    onMouseLeave = () =>{\n        const {store} = this.props;\n        store.hover = null;\n    }\n    \n    onClick = () =>{\n        const {store, id} = this.props;\n        store.selected = id;\n    }\n\n    render() {\n        const {id, name, status, user, store } = this.props;\n        const selected = store.hover == id || store.selected == id;\n\n        return (\n            <ItemWrapper\n                selected={selected}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n                onClick={this.onClick}>\n                <Icon size={30} color={status} />\n                <Content>\n                    {name}\n                    {/* <div>User ID: {user.id}</div>\n                    <div>Phone Number: {user.phone}</div> */}\n                </Content>\n            </ItemWrapper>\n        );\n    }\n}\n\nexport default Item;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport { observer, inject } from 'mobx-react';\n\nconst Side = styled.div`\n  flex: 0 0 350px;\n  padding-top: 10px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  position: relative;\n  z-index: 8;\n  overflow-y: auto;\n`;\n\n@inject('store') @observer\nclass Sidebar extends Component {\n\n    render(){\n        const {markers} = this.props;\n        \n        return (\n            <Side onClick={this.click}>\n                {markers.map(marker =>\n                    <Item key={marker.id} {...marker} />\n                )}\n            </Side>\n      );\n    }\n}\n\nexport default Sidebar;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport {GiPoliceOfficerHead} from 'react-icons/gi';\nimport { observer, inject } from 'mobx-react';\n\nconst HeaderWrapper = styled.div`\n    height: ${props => props.height};\n    width: 100%;\n    background: #fff;\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n    z-index: 10;\n    border-bottom: 1px solid #eee;\n`;\n\nconst Logo = styled.img`\n    height: ${props => props.height};\n    width: 150px;\n`;\n\nconst Right = styled.div`\n    display: flex;\n`;\n\nconst Count = styled.div`\n    padding: 10px;\n    align-self: center;\n    cursor: pointer;\n`;\n\n@inject('store') @observer\nclass Header extends Component {\n\n\n    render(){\n        const {height} = this.props;\n        const { store, store: { red, orange, green } } = this.props;\n\n        return (\n            <HeaderWrapper height={height}>\n                <Logo height={height} src={process.env.PUBLIC_URL + \"osc-logo.png\"}/>\n                <Right>\n                    <Count>Total: {green + red + orange}</Count>\n                    <Count onClick={() => store.toggle(\"green\")}><GiPoliceOfficerHead color=\"green\" /> {green}</Count>\n                    <Count onClick={() => store.toggle(\"orange\")}><GiPoliceOfficerHead color=\"orange\" /> {orange}</Count>\n                    <Count onClick={() => store.toggle(\"red\")}><GiPoliceOfficerHead color=\"red\" /> {red}</Count>\n                </Right>\n            </HeaderWrapper>\n      );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Map from './map/Map';\nimport SideBar from './sidebar/Sidebar';\nimport './App.css';\nimport styled from 'styled-components';\nimport Header from './header/Header';\nimport { observer, inject } from 'mobx-react';\n\nconst headerHeight = \"50px\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: calc(100vh - ${headerHeight});\n`;\n\n@inject('store') @observer\nclass App extends Component {\n\n  constructor(){\n    super();\n  }\n\n  render(){\n    const { store } = this.props;\n\n    return (<>\n      <Header height={headerHeight}></Header>\n      <Wrapper>\n        <SideBar markers={store.markers}></SideBar>\n        <Map markers={store.markers} zones={store.zones}/>\n      </Wrapper>\n    </>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed, action, toJS } from 'mobx';\n// import markers from './Markers';\n\nimport markers from './markers.json';\nimport zones from './zones.json';\n\nconst cleant = markers.map( m => ({\n    ...m,\n    id: m.name,\n    status: [\"red\", \"orange\", \"green\"][Math.floor(Math.random() * Math.floor(3))],\n    user: {\n        id: m.lat,\n        phone: m.lng\n    }\n}));\n\n\nconst colors = ['blue', 'yellow', 'green', 'orange', 'purple'];\nconst cleantZones = zones.map( (zone, i) => ({\n    ...zone,\n    color: colors[i]\n}));\n\nclass Store {\n\n    @observable show = observable.map({\n        red: true,\n        green: true,\n        orange: true\n    });\n\n    @action\n    toggle(color){\n        this.show.set(color, !this.show.get(color));\n    }\n\n    @observable cleant = cleant;\n\n    @computed get markers(){\n        console.log(this.show);\n\n        const filters = Object.keys(toJS(this.show)).filter(k => this.show.get(k));\n        return this.cleant.filter(m => filters.includes(m.status));\n    }\n\n    @observable zones = cleantZones;\n    @observable selected = null;\n    @observable hover = null;\n\n    @computed get red(){\n        return this.cleant.filter(m => m.status == \"red\").length;\n    }\n    @computed get orange(){\n        return this.cleant.filter(m => m.status == \"orange\").length;\n    }\n    @computed get green(){\n        return this.cleant.filter(m => m.status == \"green\").length;\n    }\n}\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"mobx-react\";\n\nimport Store from './Store';\n\nReactDOM.render(\n<Provider store={new Store()}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}